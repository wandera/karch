apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: ${cluster-name}
spec:
  api:
    loadBalancer:
      type: ${master-lb-visibility}
      idleTimeoutSeconds: ${master-lb-idle-timeout}
  authorization:
    ${kops-authorization-mode}: {}
  channel: ${channel}
  cloudConfig:
    disableSecurityGroupIngress: ${disable-sg-ingress}
  cloudLabels:
${cloud-labels}
  cloudProvider: aws
  clusterDNSDomain: ${kube-dns-domain}
  configBase: s3://${kops-state-bucket}/${cluster-name}
  configStore: s3://${kops-state-bucket}/${cluster-name}
  dnsZone: ${cluster-name}
  etcdClusters:
${etcd-clusters}
  keyStore: s3://${kops-state-bucket}/${cluster-name}/pki
  kubeAPIServer:
    insecureBindAddress: 127.0.0.1
    enableAdmissionPlugins:
    - NamespaceLifecycle
    - LimitRanger
    - ServiceAccount
    - PersistentVolumeLabel
    - DefaultStorageClass
    - DefaultTolerationSeconds
    - NodeRestriction
    - Priority
    - PodPreset
    - MutatingAdmissionWebhook
    - ValidatingAdmissionWebhook
    - ResourceQuota
    - PersistentVolumeClaimResize
    allowPrivileged: true
    anonymousAuth: false
    apiServerCount: ${master-count}
    authorizationMode: ${apiserver-authorization-mode}
${oidc-config}
    cloudProvider: aws
    etcdServers:
    - http://127.0.0.1:4001
    etcdServersOverrides:
    - /events#http://127.0.0.1:4002
    insecurePort: 8080
    kubeletPreferredAddressTypes:
    - InternalIP
    - Hostname
    - ExternalIP
    logLevel: ${log-level}
    securePort: 443
    serviceClusterIPRange: 100.64.0.0/13
    storageBackend: ${apiserver-storage-backend}
    runtimeConfig:
${apiserver-runtime-config}
    featureGates:
${featuregates-config}
  kubeControllerManager:
    allocateNodeCIDRs: true
    attachDetachReconcileSyncPeriod: 1m0s
    cloudProvider: aws
    clusterCIDR: 100.96.0.0/11
    clusterName: ${cluster-name}
    configureCloudRoutes: false
    leaderElection:
      leaderElect: true
    logLevel: ${log-level}
    useServiceAccountCredentials: true
    horizontalPodAutoscalerSyncPeriod: ${hpa-sync-period}
    horizontalPodAutoscalerDownscaleStabilization: ${hpa-scale-downscale-stabilization}
    featureGates:
${featuregates-config}
  kubeDNS:
    domain: ${kube-dns-domain}
    replicas: 2
    serverIP: 100.64.0.10
    provider: ${kube-dns-provider}
  kubeProxy:
    clusterCIDR: 100.96.0.0/11
    cpuRequest: 100m
    hostnameOverride: '@aws'
    image: gcr.io/google_containers/kube-proxy:${kubernetes-version} # From upstream
    logLevel: ${log-level}
  kubeScheduler:
    leaderElection:
      leaderElect: true
    logLevel: ${log-level}
  kubelet:
    allowedUnsafeSysctls:
${allowed-unsafe-sysctls}
    anonymousAuth: true
    cpuCFSQuota: ${kubernetes-cpu-cfs-quota-enabled}
    cpuCFSQuotaPeriod: "${kubernetes-cpu-cfs-quota-period}"
    allowPrivileged: true
    cgroupRoot: /
    cloudProvider: aws
    clusterDNS: 100.64.0.10
    clusterDomain: ${kube-dns-domain}
    enableDebuggingHandlers: true
    evictionHard: ${kubelet-eviction-flag}
    hostnameOverride: '@aws'
    kubeconfigPath: /var/lib/kubelet/kubeconfig
    logLevel: ${log-level}
    networkPluginName: cni
    nonMasqueradeCIDR: 100.64.0.0/10
    podManifestPath: /etc/kubernetes/manifests
    kubeReserved:
      cpu: "${kube-reserved-cpu}"
      memory: "${kube-reserved-memory}"
    systemReserved:
      cpu: "${system-reserved-cpu}"
      memory: "${system-reserved-memory}"
    enforceNodeAllocatable: "pods"
    featureGates:
${featuregates-config}
  kubernetesApiAccess:
${trusted-cidrs}
  kubernetesVersion: ${kubernetes-version}
  masterInternalName: api.internal.${cluster-name}
  masterKubelet:
    allowPrivileged: true
    cgroupRoot: /
    cloudProvider: aws
    clusterDNS: 100.64.0.10
    clusterDomain: ${kube-dns-domain}
    enableDebuggingHandlers: true
    evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%
    hostnameOverride: '@aws'
    kubeconfigPath: /var/lib/kubelet/kubeconfig
    logLevel: ${log-level}
    networkPluginName: cni
    nonMasqueradeCIDR: 100.64.0.0/10
    podManifestPath: /etc/kubernetes/manifests
    registerSchedulable: false
  masterPublicName: api.${cluster-name}
  networkCIDR: ${vpc-cidr}
  networkID: ${vpc-id}
  networking:
    ${container-networking}: ${container-networking-params-empty}
${container-networking-params}
  nonMasqueradeCIDR: 100.64.0.0/10
  secretStore: s3://${kops-state-bucket}/${cluster-name}/secrets
  serviceClusterIPRange: 100.64.0.0/13
  sshAccess:
${trusted-cidrs}
  subnets:
${subnets}
  topology:
    bastion:
      bastionPublicName: bastion.${cluster-name}
    dns:
      type: ${master-lb-dns-visibility}
    masters: private
    nodes: private
  hooks:
${hooks}
  additionalPolicies:
    ${master-additional-policies}
    ${node-additional-policies}
